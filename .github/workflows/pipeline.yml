Agora que já temos certeza que nossa aplicação roda no Docker criado por nós, precisamos ajustar a pipeline para que o Heroku não faça mais a criação da imagem do conteiner e sim use a nossa imagem.

Isso irá simplificar o processo de deploy, pois será apenas subir nossa imagem, porém vai exigir que nosso processo de build faça a criação da imagem.

---

###1. 
Altere o arquivo pipeline.yml para o seguinte conteúdo:

```
# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  UnitTest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Requirements
        run:  pip install flask pytest flask-wtf 

      - name: Unit Test
        run: python -m unittest -v test

  SonarCloud:
      name: SonarCloud
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: SonarCloud Scan
          uses: SonarSource/sonarcloud-github-action@master
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Build:
      needs: [UnitTest,SonarCloud ]
      name: Build
      runs-on: ubuntu-latest
      steps: 
        - name: Checkout Repo
          uses: actions/checkout@v2

        - name: Login to Heroku Container registry
          env: 
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: heroku container:login

        - name: Docker Image & Push Heroku Registry
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web

  Deploy:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web

```
---

###2. 
Vamos fazer um novo commit em nossa Branch 05-Docker e na sequência fazer merge dela para a branch principal (main). 

---

###3. 
Após o commit faça o seguinte checklist:

* Acompanhe a pipeline rodando
* Vá no Heroku e observe como mudou o deploy
* Verifique se a sua app está no ar ainda. 
